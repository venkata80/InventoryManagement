@using InventoryManagement.Models
@using InventoryManagement.Enums

@model ProductDTO

@functions{

    public SelectList GetMasterData(MasterDataType type)
    {
        if (Session["MasterData"] != null)
        {
            List<MasterDataDTO> masterData = (List<MasterDataDTO>)Session["MasterData"];
            if (masterData != null && masterData.Any())
            {
                if (type != MasterDataType.PackingType)
                {
                    return new SelectList(masterData.Where(c => c.Type == type).Select(c => new SelectListItem
                    {
                        Text = c.MasterName,
                        Value = c.Id.ToString()
                    }), "Value", "Text");
                }
                else
                {
                    return new SelectList(masterData.Where(c => c.Type == type).Select(c => new SelectListItem
                    {
                        Text = c.MasterName,
                        Value = c.Id.ToString()
                    }), "Value", "Text");
                }
            }
        }
        return new SelectList(new List<MasterDataDTO>());
    }
}


<div class="form-group">
    @Html.LabelFor(model => model.ShortCode, htmlAttributes: new { @class = "control-label col-md-3" })
    <div class="col-md-9">
        @Html.EditorFor(model => model.ShortCode, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.ShortCode, "", new { @class = "text-danger" })
    </div>
</div>

<div class="form-group">
    @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label col-md-3" })
    <div class="col-md-9">
        @Html.DropDownListFor(model => model.Brand, GetMasterData(MasterDataType.Brand), "Select Brand", new { @class = "form-control" })
    </div>
</div>

    <div class="form-group">
        @Html.LabelFor(model => model.ProductForm, htmlAttributes: new { @class = "control-label col-md-3" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.ProductForm, GetMasterData(MasterDataType.ProductForm), "Select Product From", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ProductForm, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Variety, htmlAttributes: new { @class = "control-label col-md-3" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Variety, GetMasterData(MasterDataType.Variety), "Select Variety", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Variety, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Specie, htmlAttributes: new { @class = "control-label col-md-3" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Specie, GetMasterData(MasterDataType.Specie), "Select Specie", new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FreezingType, htmlAttributes: new { @class = "control-label col-md-3" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.FreezingType, GetMasterData(MasterDataType.FreezingType), "Select Freezing Type", new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Product Type:", htmlAttributes: new { @class = "control-label col-md-3" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.PackingType, GetMasterData(MasterDataType.ProductType), "Select Packing Type", new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Packing Type:", htmlAttributes: new { @class = "control-label col-md-3" })
        <div class="col-md-9">
            @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } }) &#10006;
            @Html.DropDownListFor(model => model.PackingStyle, GetMasterData(MasterDataType.PackingType), "Select Packing Style", new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Grade, htmlAttributes: new { @class = "control-label col-md-3" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Grade, GetMasterData(MasterDataType.Grades), "Select Grade", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Grade, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Soaked, htmlAttributes: new { @class = "control-label col-md-3" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Soaked, GetMasterData(MasterDataType.Soaked), "Select Soaked", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Soaked, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Ply, htmlAttributes: new { @class = "control-label col-md-3" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Ply, GetMasterData(MasterDataType.Ply), "Select Ply", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Ply, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Print, htmlAttributes: new { @class = "control-label col-md-3" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Print, GetMasterData(MasterDataType.Print), "Select Print", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Print, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Top, htmlAttributes: new { @class = "control-label col-md-3" })
        <div class="col-md-9">
            @Html.DropDownListFor(model => model.Top, GetMasterData(MasterDataType.Top), "Select Top", new { @class = "form-control" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Dimensions, htmlAttributes: new { @class = "control-label col-md-3" })
        <div class="col-md-9">
            @Html.EditorFor(model => model.Dimensions, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.NetWeight, htmlAttributes: new { @class = "control-label col-md-3" })
        <div class="col-md-9">
            @Html.EditorFor(model => model.NetWeight, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.UploadImage.File, htmlAttributes: new { @class = "control-label col-md-3" })
        <div class="col-md-9">
            @Html.TextBoxFor(model => model.UploadImage.File, new { @class = "form-control", @type = "file" })
            @Html.ValidationMessageFor(model => model.UploadImage.File, "", new { @id = "spnerrorfile", @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.UploadImage.FileName, htmlAttributes: new { @class = "control-label col-md-3" })
        <div class="col-md-9">
            @Html.EditorFor(model => model.UploadImage.FileName, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
        </div>
    </div>
    @Html.HiddenFor(model => model.UploadImage.Id, Model.UploadImage.Id)

    <script type="text/javascript">
        $(document).on('change', '#UploadImage_File', function () {
            var a = 0;
            if ($('input:submit').attr('disabled', false)) {
                $('input:submit').attr('disabled', true);
            }
            var ext = $('#UploadImage_File').val().split('.').pop().toLowerCase();
            if ($.inArray(ext, ['png']) == -1) {
                $('#spnerrorfile').text("Invalid image format! image format must be PNG").show();
                a = 0;
            } else {
                var picsize = (this.files[0].size);
                if (picsize > 2097152) {
                    $('#spnerrorfile').text("Maximum file size limit is 2MB.").show();
                    a = 0;
                } else {
                    a = 1;
                    $('#spnerrorfile').text("").hide();
                    $('#UploadImage_FileName').val(this.files[0].name);
                }
                if (a == 1) {
                    $('input:submit').attr('disabled', false);
                }
            }
        });
    </script>
